 # S a d e q    A r a m i d e h 
 #    sadegh.a@gmail.com

remex(:OpenLocationCode)
$

def_slotted_exemplar(:OpenLocationCode,
					{
					  {:code,_unset,:writable},
					  {:latitude,_unset,:writable},
					  {:longitude,_unset,:writable},
					  {:codeLength,_unset,:writable},
					  {:debug?,_unset,:writable}					  
					},  
                    {} ) 
$


_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
## Provides a normal precision code, approximately 14x14 meters.
OpenLocationCode.define_shared_constant ( :CODE_PRECISION_NORMAL, 10 , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
## The character set used to encode the values.
OpenLocationCode.define_shared_constant ( :CODE_ALPHABET, "23456789CFGHJMPQRVWX" , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
## A separator used to break the code into two parts to aid memorability.
OpenLocationCode.define_shared_constant ( :SEPARATOR, %+ , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  The character used to pad codes.
OpenLocationCode.define_shared_constant ( :PADDING_CHARACTER, %0 , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  The number of characters to place before the separator.
OpenLocationCode.define_shared_constant ( :SEPARATOR_POSITION, 8  , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  The max number of digits to process in a plus code.
OpenLocationCode.define_shared_constant ( :MAX_DIGIT_COUNT,  15 , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  Maximum code length using just lat/lng pair encoding.
OpenLocationCode.define_shared_constant ( :PAIR_CODE_LENGTH, 10  , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  Number of digits in the grid coding section.
OpenLocationCode.define_shared_constant ( :GRID_CODE_LENGTH, OpenLocationCode.MAX_DIGIT_COUNT - OpenLocationCode.PAIR_CODE_LENGTH , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  The base to use to convert numbers to/from.
OpenLocationCode.define_shared_constant ( :ENCODING_BASE, OpenLocationCode.CODE_ALPHABET.size , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  The maximum value for latitude in degrees.
OpenLocationCode.define_shared_constant ( :LATITUDE_MAX, 90 , _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##   The maximum value for longitude in degrees.
OpenLocationCode.define_shared_constant ( :LONGITUDE_MAX, 180 , _false )
$


_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  Number of columns in the grid refinement method.
OpenLocationCode.define_shared_constant ( :GRID_COLUMNS, 4 , _false )
$


_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
##  Number of rows in the grid refinement method.
OpenLocationCode.define_shared_constant ( :GRID_ROWS, 5 , _false )
$


_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
## Value to multiple latitude degrees to convert it to an integer with the maximum encoding
## precision. I.e. ENCODING_BASE**3 * GRID_ROWS**GRID_CODE_LENGTH
OpenLocationCode.define_shared_constant ( :LAT_INTEGER_MULTIPLIER, 8000 * 3125, _false )
$


_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
## Value to multiple longitude degrees to convert it to an integer with the maximum encoding
## precision. I.e. ENCODING_BASE**3 * GRID_COLUMNS**GRID_CODE_LENGTH
OpenLocationCode.define_shared_constant ( :LNG_INTEGER_MULTIPLIER, 8000 * 1024, _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
## Value of the most significant latitude digit after it has been converted to an integer.
OpenLocationCode.define_shared_constant ( :LAT_MSP_VALUE, OpenLocationCode.LAT_INTEGER_MULTIPLIER * OpenLocationCode.ENCODING_BASE * OpenLocationCode.ENCODING_BASE, _false )
$

_pragma(classify_level=advanced, topic={OpenLocationCode}, usage={internal})
## Value of the most significant longitude digit after it has been converted to an integer.
OpenLocationCode.define_shared_constant ( :LNG_MSP_VALUE, OpenLocationCode.LNG_INTEGER_MULTIPLIER * OpenLocationCode.ENCODING_BASE * OpenLocationCode.ENCODING_BASE, _false )
$




_method OpenLocationCode.new ( latitude , longitude , _optional codeLength , debug?)

	 _self.latitude << latitude
	 _self.longitude << longitude
	 _self.codeLength << codeLength.default(_self.CODE_PRECISION_NORMAL)
	 _self.debug? << debug?.default(_false) 
	 
     >> _clone.init() 
_endmethod 
$

_private _method OpenLocationCode.init() 
		
        >> _self 
_endmethod 
$




_method  OpenLocationCode.get_code()
	
	
	 _dynamic !print_float_precision! << 10
	 
    # Limit the maximum number of digits in the code.
    _self.codeLength << min( _self.codeLength, _self.MAX_DIGIT_COUNT);
	
#    # Check that the code length requested is valid.
#    if (codeLength < PAIR_CODE_LENGTH && codeLength % 2 == 1 || codeLength < 4) {
#      throw new IllegalArgumentException("Illegal code length " + codeLength);
#    }
	
    # Ensure that latitude and longitude are valid.
    _self.latitude << _self.clipLatitude(_self.latitude);
    _self.longitude << _self.normalizeLongitude( _self.longitude);

	
	_if .debug?
	_then 
		write( "Latitude:",_self.latitude)
		write( "Longitude:",_self.longitude)		
	_endif 	
	
    # Latitude 90 needs to be adjusted to be just less, so the returned code can also be decoded.
    _if  (_self.latitude < _self.LATITUDE_MAX) 
	_then 
      _self.latitude << _self.latitude - 0.9 * _self.computeLatitudePrecision( _self.codeLength);
    _endif 

    # Store the code - we build it in reverse and reorder it afterwards.
    _local revCodeBuilder << ""

    # Compute the code.
    # This approach converts each value to an integer after multiplying it by
    # the final precision. This allows us to use only integer operations, so
    # avoiding any accumulation of floating point representation errors.

    # Multiply values by their precision and convert to positive. Rounding
    # avoids/minimises errors due to floating point precision.
    latVal << (( (_self.latitude + _self.LATITUDE_MAX) * _self.LAT_INTEGER_MULTIPLIER * 10**6).rounded / 10**6).as_float
    lngVal << (( (_self.longitude + _self.LONGITUDE_MAX) * _self.LNG_INTEGER_MULTIPLIER * 10**6).rounded / 10**6).as_float

	_if .debug?
	_then 
		write( "latVal:",latVal)
		write( "lngVal:",lngVal)		
	_endif 		
	
    # Compute the grid part of the code if necessary.
	_local latDigit , lngDigit ,ndx
	
	
    _if  (_self.codeLength > _self.PAIR_CODE_LENGTH)
	_then 
	
      _for i _over 1.upto( _self.GRID_CODE_LENGTH)
	  _loop
	  
    	     latDigit << latVal.rounded _mod  _self.GRID_ROWS;
        	 lngDigit << lngVal.rounded _mod  _self.GRID_COLUMNS;		
            ndx << (latDigit * _self.GRID_COLUMNS + lngDigit) 
			
    		_if ndx = 0
    		_then 
    			ndx << _self.CODE_ALPHABET.size
    		_endif
			 	
			revCodeBuilder +<< _self.CODE_ALPHABET[ndx] 	 
						
            latVal << (latVal / _self.GRID_ROWS).as_float
            lngVal << (lngVal / _self.GRID_COLUMNS).as_float
			
      _endloop 
	  
	  
    _else
	
          latVal << (latVal / (_self.GRID_ROWS ** _self.GRID_CODE_LENGTH)).as_float
          lngVal << (lngVal / (_self.GRID_COLUMNS **  _self.GRID_CODE_LENGTH )).as_float
		  
    _endif 
	

	
    # Compute the pair section of the code.
	
    _for i _over 1.upto( _self.PAIR_CODE_LENGTH _div  2 )
	_loop 
	      revCodeBuilder +<< _self.CODE_ALPHABET[ ( lngVal.ceiling _mod  _self.ENCODING_BASE ).rounded ].write_string
    	  revCodeBuilder +<< _self.CODE_ALPHABET[ ( latVal.ceiling _mod  _self.ENCODING_BASE ).rounded ] .write_string		   
          latVal << (latVal / _self.ENCODING_BASE).as_float
          lngVal << (lngVal / _self.ENCODING_BASE).as_float
	  
	      # If we are at the separator position, add the separator.
          _if  (i = 1)
    	  _then 
              revCodeBuilder +<< _self.SEPARATOR
          _endif 
    	  
    _endloop 
	
   # Reverse the code.
    code << revCodeBuilder.reversed()

    # If we need to pad the code, replace some of the digits.
    _if  (_self.codeLength < _self.SEPARATOR_POSITION )
	_then 
       _for i _over _self.codeLenght.upto( _self.SEPARATOR_POSITION-1)
	   _loop 
	        code[i] << _self.PADDING_CHARACTER
		_endloop 
      
    _endif 
	

	
    code <<  code.subseq0(0, max(_self.SEPARATOR_POSITION, _self.codeLength) ) .write_string
	_return code
_endmethod 
$



 _private _method OpenLocationCode.clipLatitude( latitude ) 
   _return min( max(latitude, -1 * _self.LATITUDE_MAX), _self.LATITUDE_MAX)
_endmethod 
$


_private _method OpenLocationCode.normalizeLongitude( longitude )
	_loop 
		_if longitude < -1 * _self.LONGITUDE_MAX
		_then 
			longitude << longitude + _self.LONGITUDE_MAX * 2
		_else 
			_leave 	
		_endif 
	_endloop 
	
	_loop 
		_if longitude >= _self.LONGITUDE_MAX 
		_then 
			longitude << longitude - _self.LONGITUDE_MAX * 2
		_else 
			_leave 	
		_endif 	
	_endloop
	 
    _return  longitude
	
_endmethod 
$


_private _method  OpenLocationCode.computeLatitudePrecision( codeLength )
	
    _if  codeLength <= _self.CODE_PRECISION_NORMAL
	_then 
		_return  (_self.ENCODING_BASE ** ( (codeLength / -2) + 2)).as_float
    _endif 
	
    _return ((_self.ENCODING_BASE** -3) / (_self.GRID_ROWS ** codeLength - _self.PAIR_CODE_LENGTH)).as_float
	
_endmethod 
$

